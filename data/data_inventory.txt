
// NOTE: must separate commands with " , " (spaces)
// commands are not case sensitive
//
// initial state
// N = name, P = price, C = count 

// setUp
SERVICE [50, 50, 50, 50] [ [N:'Cashews', P:'65', C:'10'], [N:'DingDongs', P:'100', C:'10'], [N:'HostessFruitPie', P:'150', C:'0'] ]
VERIFY [50, 50, 50, 50] [0, 0, 0, 0] [ [N:'Cashews', P:'65', C:'10'], [N:'DingDongs', P:'100', C:'10'], [N:'HostessFruitPie', P:'150', C:'0'] ]

// TODO case: item does not exist
//GET Z
//VERIFY [50, 50, 50, 50] [0, 0, 0, 0] [ [N:'Cashews', P:'65', C:'10'], [N:'DingDongs', P:'100', C:'10'], [N:'HostessFruitPie', P:'150', C:'0'] ]

// case: item out of stock
GET HostessFruitPie
VERIFY [50, 50, 50, 50] [0, 0, 0, 0] [ [N:'Cashews', P:'65', C:'10'], [N:'DingDongs', P:'100', C:'10'], [N:'HostessFruitPie', P:'150', C:'0'] ]

// case: item in stock, exact change
Q , Q , D , N , GET Cashews
VERIFY [50, 52, 51, 51] [0, 0, 0, 0] [ [N:'Cashews', P:'65', C:'9'], [N:'DingDongs', P:'100', C:'10'], [N:'HostessFruitPie', P:'150', C:'0'] ]

// TODO: this returns dollars and seems to normalize the availableChange
// case: item in stock, not exact change
//Q , Q , D , N , $ , GET Cashews
//VERIFY [51, 51, 54, 50] [0, 0, 0, 1] [ [N:'Cashews', P:'65', C:'9'], [N:'DingDongs', P:'100', C:'10'], [N:'HostessFruitPie', P:'150', C:'0'] ]

